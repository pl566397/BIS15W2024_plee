```{r setup, include = FALSE}
setwd("C:/Users/plee/Documents/Bioinfo_R_analysis")
class(my_numeric)
#How to get working directory
getwd()
#How to import data from excel
fish <- read_csv("data/Gaeta_etal_CLC_data.csv")
library("tidyverse")
#How to get working directory
getwd()
#How to set working directory
##Session>Set Working Directory>Choose Directory>Documents>folder name
setwd("C:/Users/plee/Documents/Bioinfo_R_analysis")
#How to import data from excel
fish <- read_csv("data/Gaeta_etal_CLC_data.csv")
#How to import data from excel
fish <- read_csv("data/Gaeta_etal_CLC_data.csv")
library(readr)
#How to import data from excel
fish <- read_csv("data/Gaeta_etal_CLC_data.csv")
#How to import data from excel
fish <- read.csv("data/Gaeta_etal_CLC_data.csv")
#How to import data from excel
fish <- read_csv("data/Gaeta_etal_CLC_data.csv")
setwd("C:/Users/plee/Documents/Bioinfo_R_analysis/data")
#How to import data from excel
fish <- read_csv("data/Gaeta_etal_CLC_data.csv")
setwd("~/Bioinfo_R_analysis")
#How to import data from excel
fish <- read_csv("data/Gaeta_etal_CLC_data.csv")
#How to import data from excel
elephants <- read_csv("data/ElephantsMF.csv")
##Data Structure Summary functions
#Once data have been uploaded, you may want to get an idea of its structure, contents, and dimensions. I routinely run one or more of these commands when data are first imported.
summary(elephants) #tells us how big data is, gives us min, medium, max, can't do that to characters
glimpse(elephants)
nrow(elephants) #4033 rows, # of rows
ncol(elephants) #number of col
dim(elephants) #gives the dimensions
names(elephants) #gives the column names
head(elephants) #gives you first few observations of dataframe
tail(elephants) #gives you the few last snapshot of data frame
table(elephants) #useful when you have a limited number of categorical variables. It produces fast counts of the number of observations in a variable.
View(elephants) #to view data,click on the `fish` data frame in the Environment tab or type View(fish)
str(elephants)
mean(elephants, na.rm=T)
mean(elephants)
mean(elephants$age)
mean(elephants$age, na.rm = TRUE)
class(elephants$age)
elephants$age <- as.numeric(elephants$age)
unique(elephants$age)
mean(elephants$age, na.rm = TRUE)
fish <- read_csv("data/Gaeta_etal_CLC_data.csv")
tail(fish) #gives you the few last snapshot of data frame
str(fish)
View(fish)
mean(fish$length)
# Accessing Data Frame Columns and Rows
##The first row.
fish[1,]
##The third column.
fish[ ,3]
### Combining them
fishephants<- rbind(fish, elephants) #adding "fish to elephants"
#Adding ROWS to data
# `rbind()` function, known as row bind will bind new vectors to our data frame row-wise.
#cannot rbind fish and elephants because their columns don't match (aka not the same data)
##Example:
### Data frame 1
hbirds <- data.frame(sex=Sex, length=Length, weight_g=Weight)
hbirds
table(fish$lakeid)
### Combining them
elephants<- rbind(new_elephants, elephants) #adding "new_bird" to "hbirds"
### Data Frame 2
new_elephants <- c(15, 230, F)
### Combining them
elephants<- rbind(new_elephants, elephants) #adding "new_bird" to "hbirds"
elephants
### Data Frame 2
new_elephants <- c(1000, 1, F)
### Combining them
elephants<- rbind(new_elephants, elephants) #adding "new_bird" to "hbirds"
### Data Frame 2
new_elephants <- c(1000, 1, "M")
### Data Frame 2
new_elephants <- c(1000, 1, "M")
### Combining them
elephants<- rbind(new_elephants, elephants) #adding "new_bird" to "hbirds"
## Adding Columns
#What if we come across more data and we want to add it to our data frame? We can also do that with the `$` operator.
elephants$Sex <- c("Diet", "Habitat", "Fecundity")
## Adding Columns
#What if we come across more data and we want to add it to our data frame? We can also do that with the `$` operator.
elephants$Age <- c(3000,4000,5000)
#Filter Function
#Filter is a way of pulling out observations that meet specific criteria in a variable.
little_fish <- filter(fish, length<=100) #fishes that are less than or equal to 100
View(little_fish)
##Select Function
# allows you to pull out columns of interest from a dataframe. To do this, just add the names of the columns to the `select()` command. The order in which you add them, will determine the order in which they appear in the output.
#We are only interested in lakeid and scalelength.
select(fish, "lakeid", "scalelength") #allows you to just pull out those columns, select(name of dataframe and the columns you want), fish is not a column so it is not in quotes
fish_subset<- select(fish, "fish_id", "length") #reversing length and fishid, it's going to give it in the reverse way #fishsubset chops up the dataframe and now we have it in our environment
View(fish_subset)
select(fish, fish_id:length)# fish_id:length gives us the data in the columns from fish_id to length
select(fish, -fish_id, -annnumber, -length, -radii_length_mm) #- operator selects everything except the specified variables
select(fish, contains("length")) #pulls out data that contains the work length
select(fish, starts_with("radii")) #pull out all the variables that start with "radii"
select(fish, starts_with("lak")) #pull out all the variables that start with "radii"
select(fish, starts_with("radii")) #pull out all the variables that start with "radii"
select(fish, matches("a.+er"))
select_if(fish, is.numeric) #pull out all the numerics
select_if(fish, ~!is.numeric(.)) #look into fish and pull out everything that is not numeric
#New Data
mammals <- read_csv("data/mammal_lifehistories_v2.csv")
View(mammals)
#rename data to keep things uniformed
mammals <- rename(mammals, genus=Genus, wean_mass="wean mass", max_life="max. life", litter_size="litter size", litters_per_year="litters/year")
filter(fish, lakeid == "AL")#look in the fish data and pull out all the obersavtions that correspond to lakeid
little_fish <- filter(fish, length<=100) #fishes that are less than or equal to 100
little_fish
filter(fish, length >= 350) #all the observations that are greater than or equal to 350
filter(fish, lakeid != "AL")
not_AL <- filter(fish, lakeid != "AL")
not_AL
library(dplyr)
filter(fish, lakeid != "AL")
not_AL <- filter(fish, lakeid != "AL")
## Using `filter()` with multiple observations
filter(fish, length %in% c(167, 175)) #filter is within the variable length that are 167 or 175
filter(fish, between(scalelength, 2.5, 2.55)) #look at fish, and look in scalelength in between 2.5 and 2.55
filter(fish, near(radii_length_mm, 2, tol = 0.2)) #look for radii length near 2 with a 0.2 tolerance
filter(fish, lakeid == "AL" & length > 350)#filter, fish data with lakeid =="AL" AND length>350
filter(fish, lakeid == "AL" | length > 350)
filter(fish, lakeid == "AL" & length > 350)#filter, fish data with lakeid =="AL" AND length>350
filter(fish, lakeid == "AL" & length > 350)#filter, fish data with lakeid =="AL" AND length>350
filter(fish, lakeid == "AL" | length > 350)
## Pipes `%>%`
#In order to start combining `select()`, `filter()`, and other functions efficiently, we need to learn pipes.
#Pipes feed the output from one function into the input of another function. This helps us keep our code sequential and clean.
select(fish, lakeid, scalelength)
filter(fish, lakeid == "AL")
fish %>%
select(lakeid, scalelength) %>%
filter(lakeid == "AL")
fish %>% #fish data
select(lakeid, radii_length_mm) %>% #pulls out variables of interest
filter(lakeid=="AL" | lakeid== "AR") %>% #only these lakes
filter(between(radii_length_mm, 2,4)) %>% #between 2 and 4
arrange(desc(radii_length_mm)) #sort
##MUTATE FUNCTION
fish %>%
mutate(length_mm = length*10) %>%
select(fish_id, length, length_mm)
View(fish)
View(mammals)
#NEW DATA SET
superhero_info <- read_csv("data/heroes_information.csv", na = c("", "-99", "-"))# means that NA = "nothing", "-99", "-"
superhero_powers <- read_csv("data/super_hero_powers.csv", na = c("", "-99", "-"))
tabyl(superhero_info, Alignment)
names(superhero_info)
superhero_info %>%
select(Publisher)
table(superhero_info$Publisher)
filter(superhero_info, Alignment=="neutral")
View(superhero_info)
superhero_info %>%
select(name, Alignment, Race)
## Not Human
#List all of the superheros that are not human.
filter(superhero_info, Race != "Human" & Race != "Human / Radiation")
good_guys <- superhero_info %>%
select(name, Gender, Race, `Hair color`, Alignment, Publisher) %>%
filter(Alignment=="good")
good_guys
bad_guys <- superhero_info %>% #work w/ superhero data
select(name, Gender, Race, `Hair color`, Height, Alignment, Publisher) %>%
filter(Alignment=="bad")
bad_guys
tabyl(good_guys, Race)
library("janitor")
tabyl(good_guys, Race)
#Among the good guys, Who are the Vampires?
vampires <- good_guys %>%
select(name, Race) %>%
filter(Race=="Vampire")
vampires
#Among the bad guys, who are the male humans over 200 inches in height?
bad_guys %>%
select(name, Gender, Race, Height) %>%
filter(Height>200) %>%
filter(Gender=="Male")
#Are there more good guys or bad guys with green hair?
good_guys %>%
select(name, `Hair color`) %>%
filter(`Hair color`== "Green")
bad_guys %>%
select(name, `Hair color`) %>%
filter(`Hair color`== "Green")
#Let's explore who the really small superheros are. In the `superhero_info` data,
#which have a weight less than 50? Be sure to sort your results by weight lowest to highest.
superhero_info %>%
select(name, Weight) %>%
filter(Weight<50) %>%
arrange(Weight)
#Let's make a new variable that is the ratio of height to weight. Call this variable `height_weight_ratio`
superhero_info %>%
mutate(height_weight_ratio = Height/Weight) %>%
select(name, height_weight_ratio)
#How to get working directory
getwd()
library("tidyverse")
library(readr)
library(dplyr)
library("janitor")
#How to get working directory
getwd()
##Data Structure Summary functions
#Once data have been uploaded, you may want to get an idea of its structure, contents, and dimensions. I routinely run one or more of these commands when data are first imported.
summary(elephants) #tells us how big data is, gives us min, medium, max, can't do that to characters
#How to import data from excel
elephants <- read_csv("data/ElephantsMF.csv")
fish <- read_csv("data/Gaeta_etal_CLC_data.csv")
##Data Structure Summary functions
#Once data have been uploaded, you may want to get an idea of its structure, contents, and dimensions. I routinely run one or more of these commands when data are first imported.
summary(elephants) #tells us how big data is, gives us min, medium, max, can't do that to characters
summary(fish)
View(fish)
glimpse(elephants)
nrow(elephants) #4033 rows, # of rows
ncol(elephants) #number of col
dim(elephants) #gives the dimensions
names(elephants) #gives the column names
head(elephants) #gives you first few observations of dataframe
tail(fish) #gives you the few last snapshot of data frame
table(elephants) #useful when you have a limited number of categorical variables. It produces fast counts of the number of observations in a variable.
table(fish$lakeid)
table(fish)
table(fish$lakeid)
View(elephants)
View(elephants) #to view data,click on the `fish` data frame in the Environment tab or type View(fish)
str(fish)
# Accessing Data Frame Columns and Rows
##The first row.
fish[1,]
##The third column.
elephants[ ,3]
library("tidyverse")
library(readr)
library(dplyr)
library("janitor")
#How to get working directory
getwd()
#How to import data from excel
elephants <- read_csv("data/ElephantsMF.csv")
fish <- read_csv("data/Gaeta_etal_CLC_data.csv")
View(elephants)
##Data Structure Summary functions
#Once data have been uploaded, you may want to get an idea of its structure, contents, and dimensions. I routinely run one or more of these commands when data are first imported.
summary(elephants) #tells us how big data is, gives us min, medium, max, can't do that to characters
summary(fish)
View(fish)
glimpse(elephants)
nrow(elephants) #4033 rows, # of rows
ncol(elephants) #number of col
dim(elephants) #gives the dimensions
names(elephants) #gives the column names
head(elephants) #gives you first few observations of dataframe
tail(fish) #gives you the few last snapshot of data frame
table(fish$lakeid)
View(elephants)
View(elephants) #to view data,click on the `fish` data frame in the Environment tab or type View(fish)
str(fish)
# Accessing Data Frame Columns and Rows
##The first row.
fish[1,]
# Accessing Data Frame Columns and Rows
##The first row.
fish[5,]
##The third column.
elephants[ ,3]
### Data Frame 2
new_elephants <- c(1000, 1, "M")
### Combining them
elephants<- rbind(new_elephants, elephants) #adding "new_bird" to "hbirds"
## Adding Columns
#What if we come across more data and we want to add it to our data frame? We can also do that with the `$` operator.
elephants$Age <- c(3000,4000,5000)
##Select Function
# allows you to pull out columns of interest from a dataframe. To do this, just add the names of the columns to the `select()` command. The order in which you add them, will determine the order in which they appear in the output.
#We are only interested in lakeid and scalelength.
select(fish, "lakeid", "scalelength") #allows you to just pull out those columns, select(name of dataframe and the columns you want), fish is not a column so it is not in quotes
##Select Function
# allows you to pull out columns of interest from a dataframe. To do this, just add the names of the columns to the `select()` command. The order in which you add them, will determine the order in which they appear in the output.
#We are only interested in lakeid and scalelength.
select(fish, "scalelength", "lakeid") #allows you to just pull out those columns, select(name of dataframe and the columns you want), fish is not a column so it is not in quotes
select(fish, fish_id:length)# fish_id:length gives us the data in the columns from fish_id to length
select(fish, -fish_id, -annnumber, -length, -radii_length_mm) #- operator selects everything except the specified variables
select(fish, contains("length")) #pulls out data that contains the work length
select(fish, starts_with("radii")) #pull out all the variables that start with "radii"
select(fish, matches("a.+er"))
select_if(fish, is.numeric) #pull out all the numerics
#New Data
mammals <- read_csv("data/mammal_lifehistories_v2.csv")
View(mammals)
filter(fish, lakeid == "AL")#look in the fish data and pull out all the obersavtions that correspond to lakeid
little_fish <- filter(fish, length<=100) #fishes that are less than or equal to 100
little_fish
View(little_fish)
filter(fish, lakeid == "AL" & length > 350)#filter, fish data with lakeid =="AL" AND length>350
filter(fish, lakeid == "AL" | length > 350)# | = or
## Using `filter()` with multiple observations
filter(fish, length %in% c(167, 175)) #filter is within the variable length that are 167 or 175
filter(fish, between(scalelength, 2.5, 2.55)) #look at fish, and look in scalelength in between 2.5 and 2.55
filter(fish, near(radii_length_mm, 2, tol = 0.2)) #look for radii length near 2 with a 0.2 tolerance
fish %>%
select(lakeid, scalelength) %>%
filter(lakeid == "AL")
fish %>% #fish data
select(lakeid, radii_length_mm) %>% #pulls out variables of interest
filter(lakeid=="AL" | lakeid== "AR") %>% #only these lakes
filter(between(radii_length_mm, 2,4)) %>% #between 2 and 4
arrange(desc(radii_length_mm)) #sort from greatest to least
fish %>% #fish data
select(lakeid, radii_length_mm) %>% #pulls out variables of interest
filter(lakeid=="AL" | lakeid== "AR") %>% #only these lakes
filter(between(radii_length_mm, 2,4)) %>% #between 2 and 4
arrange(radii_length_mm) #sort from greatest to least
fish %>% #fish data
select(lakeid, radii_length_mm) %>% #pulls out variables of interest
filter(lakeid=="AL" | lakeid== "AR") %>% #only these lakes
filter(between(radii_length_mm, 2,4)) %>% #between 2 and 4
arrange() #sort from greatest to least
fish %>% #fish data
select(lakeid, radii_length_mm) %>% #pulls out variables of interest
filter(lakeid=="AL" | lakeid== "AR") %>% #only these lakes
filter(between(radii_length_mm, 2,4)) %>% #between 2 and 4
arrange(radii_length_mm) #sort from greatest to least
#NEW DATA SET
superhero_info <- read_csv("data/heroes_information.csv", na = c("", "-99", "-"))# means that NA = "nothing", "-99", "-"
superhero_powers <- read_csv("data/super_hero_powers.csv", na = c("", "-99", "-"))
names(superhero_info)
names(superhero_powers)
names(superhero_info)
superhero_info %>%
select(Publisher)
table(superhero_info$Publisher)
View(superhero_info)
filter(superhero_info, Alignment=="neutral")
superhero_info %>%
select(name, Alignment, Race)
#List all of the superheros that are not human.
filter(superhero_info, Race != "Human" & Race != "Human / Radiation")
good_guys <- superhero_info %>%
select(name, Gender, Race, `Hair color`, Alignment, Publisher) %>%
filter(Alignment=="good")
good_guys
bad_guys <- superhero_info %>% #work w/ superhero data
select(name, Gender, Race, `Hair color`, Height, Alignment, Publisher) %>%
filter(Alignment=="bad")
bad_guys
#Among the good guys, Who are the Vampires?
vampires <- good_guys %>%
select(name, Race) %>%
filter(Race=="Vampire")
vampires
#Among the bad guys, who are the male humans over 200 inches in height?
bad_guys %>%
select(name, Gender, Race, Height) %>%
filter(Height>200) %>%
filter(Gender=="Male")
#Are there more good guys or bad guys with green hair?
good_guys %>%
select(name, `Hair color`) %>%
filter(`Hair color`== "Green")
bad_guys %>%
select(name, `Hair color`) %>%
filter(`Hair color`== "Green")
#Let's explore who the really small superheros are. In the `superhero_info` data,
#which have a weight less than 50? Be sure to sort your results by weight lowest to highest.
superhero_info %>%
select(name, Weight) %>%
filter(Weight<50) %>%
arrange(Weight)# different from arrange(desc)
#Let's make a new variable that is the ratio of height to weight. Call this variable `height_weight_ratio`
superhero_info %>%
mutate(height_weight_ratio = Height/Weight) %>%
select(name, height_weight_ratio)
